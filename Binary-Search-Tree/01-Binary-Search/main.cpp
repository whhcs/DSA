#include <iostream>
#include <ctime>
#include <cassert>

using namespace std;

// 二分查找法，在有序数组arr中，查找target
// 如果找到target，返回相应的索引index
// 如果没有找到target，则返回-1
template<typename T>
int binarySearch(T arr[], int n, T target) {

	// 在arr[l...r]之中查找target
	int l = 0, r = n - 1;
	while (l <= r) {

		// int mid = (l + r) / 2;
		// 防止极端情况下，整形溢出，故使用下面的逻辑求出mid
		int mid = l + (r - l) / 2;
		if (target < arr[mid])
			r = mid - 1;		// 在arr[l...mid-1]中查找target
		else if (target > arr[mid])
			l = mid + 1;		// 在arr[mid+1...r]中查找target
		else
			return mid;
	}
	return -1;
}


// 用递归的方式写二分查找法

template<typename T>
int _binarySearch2(T arr[], int l, int r, T target) {

	if (l > r)
		return -1;

	int mid = l + (r - l) / 2;
	if (target > arr[mid])
		_binarySearch2(arr, mid + 1, r, target);
	else if (target < arr[mid])
		_binarySearch2(arr, l, mid - 1, target);
	else
		return mid;
}

template<typename T>
int binarySearch2(T arr[], int n, T target) {
	return _binarySearch2(arr, 0, n - 1, target);
}

// 比较非递归和递归写法的二分查找的效率
// 非递归算法在性能上有微弱优势
int main() {

	int n = 1000000;
	int* a = new int[n];
	for (int i = 0; i < n; i++)
		a[i] = i;

	// 测试非递归二分查找法
	clock_t startTime = clock();

	// 对于我们的待查找数据[0...n)
	// 对[0...n)区间的数值使用二分查找，最终结果应该是数字本身
	// 对[n...2*n)区间的数值使用二分查找，因为这些数字不再arr中，结果为-1
	for (int i = 0; i < 2 * n; i++) {
		int v = binarySearch(a, n, i);
		if (i < n)
			assert(v == i);
		else
			assert(v == -1);
	}
	clock_t endTime = clock();
	cout << "Binary Search (Without Recursion): " << double(endTime - startTime) / CLOCKS_PER_SEC
		<< " s" << endl;

	// 测试递归的二分查找法
	startTime = clock();

	for (int i = 0; i < 2 * n; i++) {
		int v = binarySearch2(a, n, i);
		if (i < n)
			assert(v == i);
		else
			assert(v == -1);
	}
	endTime = clock();
	cout << "Binary Search (Recursion): " << double(endTime - startTime) / CLOCKS_PER_SEC
		<< " s" << endl;

	delete[] a;

	return 0;
}
